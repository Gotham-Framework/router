// Generated by CoffeeScript 1.8.0
(function() {
  this.Router = (function() {
    Router.prototype._routes = [];

    Router.prototype._request = '';

    Router.prototype._success = false;

    Router.prototype._response = {};

    function Router() {
      this._request = this._slashes(window.location.pathname);
    }

    Router.prototype.match = function(pattern, result, constraint) {
      pattern = this._slashes(pattern);
      return this._routes.push({
        pattern: pattern,
        result: result,
        parsed: this._parse_pattern(pattern),
        variables: this._fetch_variables(pattern),
        constraint: constraint
      });
    };

    Router.prototype.run = function() {
      var index, params, params_request, route, success, success_constraint, variable, _i, _j, _len, _len1, _ref, _ref1, _results;
      _ref = this._routes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        route = _ref[_i];
        if (route.parsed.test(this._request)) {
          success = true;
          params = {};
          if (route.variables != null) {
            params_request = route.parsed.exec(this._request);
            _ref1 = route.variables;
            for (index = _j = 0, _len1 = _ref1.length; _j < _len1; index = ++_j) {
              variable = _ref1[index];
              params[variable] = params_request[index + 1];
            }
          }
          if (route.constraint != null) {
            if (typeof route.constraint === 'function') {
              success_constraint = route.constraint(params);
              if (success_constraint === false) {
                success = false;
              }
            }
          }
          if (success === true) {
            this._success = true;
            this._response = {
              result: route.result,
              params: params
            };
            break;
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Router.prototype.passes = function() {
      return this._success;
    };

    Router.prototype.fails = function() {
      if (!this._success) {
        return true;
      }
      return false;
    };

    Router.prototype.response = function() {
      return this._response;
    };

    Router.prototype._decode = function(controller) {
      return controller.split('#').join('/');
    };

    Router.prototype._slashes = function(str) {
      if (str) {
        if (str[str.length - 1] === '/') {
          str = str.substr(0, str.length - 1);
        }
        while (str.charAt(0) === '/') {
          str = str.substr(1);
        }
      }
      return str;
    };

    Router.prototype._parse_pattern = function(pattern) {
      var variables;
      variables = /(:[a-zA-Z_]*)/g;
      pattern = pattern.replace(variables, '([a-zA-Z0-9-_]*)');
      return new RegExp('^' + pattern + '$');
    };

    Router.prototype._fetch_variables = function(pattern) {
      var index, variable, variables, _i, _len;
      variables = /(:[a-zA-Z_]*)/g;
      variables = pattern.match(variables);
      if (variables != null) {
        for (index = _i = 0, _len = variables.length; _i < _len; index = ++_i) {
          variable = variables[index];
          variables[index] = variable.replace(':', '');
        }
      }
      return variables;
    };

    return Router;

  })();

}).call(this);
